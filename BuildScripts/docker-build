#! /bin/sh

## Perform multiple local builds using Docker

## This script is part of the Talisker Developer Tools
## https://github.com/taliskerPlatform/Developer

## Copyright 2017 Mo McRoberts.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.

if ! test -r configure.ac 2>&1 ; then
	echo "This script must be executed from the root of the source tree" >&2
	echo "and invoked as:" >&2
	echo "" >&2
	echo "BuildScripts/docker-build" >&2
	exit 1
fi

RESOURCES="BuildResources/Docker"
SCRIPTS="BuildScripts"
BUILD="DockerBuild"
BASESUFFIX="-base"
PACKAGE=$(basename `pwd`)
PKGNAME=""
CACHEBUST="$$"

if test -r BuildResources/Docker/docker-build.conf ; then
	. BuildResources/Docker/docker-build.conf || exit $?
fi

test x"${PKGNAME}" = x"" && PKGNAME="`echo ${PACKAGE} | tr A-Z a-z`"
TARBALL="${PKGNAME}-docker-root.$$.tar"

function dist()
{
	test -d "${BUILD}" || mkdir -p "${BUILD}" || exit $?
	if ! test -r "${BUILD}/${TARBALL}" ; then
		echo "Preparing source archive for Docker build..." >&2
		"${SCRIPTS}/mkdist" "${BUILD}/${TARBALL}" || exit $?
	fi
}

function clean()
{
	echo "Removing temporary build resources (DockerBuild)..." >&2
	rm -rf "${BUILD}"
}

function update()
{
	local subdir="${RESOURCES}/$1"
	local IMAGETAG="$1"
	local IMAGENAME="${PKGNAME}${BASESUFFIX}:${IMAGETAG}"
	local result
	
	echo "Building ${PACKAGE} base Docker image ${IMAGENAME}..." >&2
	docker build -t "${IMAGENAME}" "${subdir}"
	result=$?
	if test $result -ne 0 ; then
		echo "**** Docker build failed with status $result ****" >&2
		exit $result
	fi
}

function prepare()
{
	local subdir="${RESOURCES}/$1"
	local IMAGETAG="$1"
	local IMAGENAME="${PKGNAME}${BASESUFFIX}:${IMAGETAG}"
	local match
	
	printf "Checking for ${PACKAGE} base Docker image ${IMAGENAME}..." >&2
	match="`( docker images \"${IMAGENAME}\" | egrep \"^${PKGNAME}${BASESUFFIX}\" ) 2>&1`"
	if test x"$match" = x"" ; then
		echo " (not found)" >&2
		update "$subdir"
	else
		echo " found" >&2
	fi	
}

function build()
{
	local dist="$1"
	local target="$2"
	local DIRNAME="${PKGNAME}-${dist}"
	local IMAGENAME="${PKGNAME}"
	local BASEIMAGENAME="${PKGNAME}${BASESUFFIX}:${dist}"
	local dockerfile=""
	local try
	local result
	
	if ! test x"$target" = x"" ; then
		IMAGENAME="${IMAGENAME}-${target}"
		DIRNAME="${DIRNAME}-${target}"
	fi
	IMAGENAME="${IMAGENAME}:${dist}"
	prepare "${dist}"
	dist
	printf "building ${PACKAGE} for ${dist}...\n" >&2
	cd "${BUILD}"
	rm -rf "${DIRNAME}"
	mkdir "${DIRNAME}"
	cd "${DIRNAME}" || return $?
	rm -f "${TARBALL}"
	cp "../${TARBALL}" . || return $?
	if test x"${target}" = x"" ; then
		try="build.tmpl"
		suffix=""
	else
		try="${target}.tmpl"
		suffix="-${target}"
	fi
	for dir in "${RESOURCES}/${dist}" "${RESOURCES}" ; do
		if test -r "${dir}/${try}" ; then
			dockerfile="${dir}/${try}"
			echo "+ found Dockerfile template ${dockerfile}" >&2
			break
		fi
	done
	if ! test x"$dockerfile" = x"" ; then
		sed -e "s!@PKGNAME@!${PKGNAME}!g" \
			-e "s!@PACKAGE@!${PACKAGE}!g" \
			-e "s!@DIST@!${dist}g" \
			-e "s!@TARGET@!${target}!g" 
			-e "s!@BASEIMAGENAME@!${BASEIMAGENAME}!g" \
			-e "s!@IMAGENAME@!${IMAGENAME}!g" \
			-e "s!@DIRNAME@!${DIRNAME}!g" \
			-e "s!@RESOURCES@!${RESOURCES}!g" \
			-e "s!@BUILD@!${BUILD}!g" \
			< "$dockerfile" > Dockerfile
	else
		if ! test x"$target" = x"" ; then
			echo "*** Error: could not find ${try} within ${RESOURCES}" >&2
			return 1
		fi
		cat >Dockerfile <<EOF
## Automatically generated by ${SCRIPTS}/docker-build

FROM ${BASEIMAGENAME}

RUN mkdir -p /root/BuildRoot/${PKGNAME}

ADD ${TARBALL} /root/BuildRoot/${PKGNAME}

WORKDIR /root/BuildRoot

RUN cd /root/BuildRoot && \
	${PKGNAME}/BuildResources/CI/before_install.sh "$dist" "$target"

RUN cd /root/BuildRoot/${PKGNAME} && \
	autoreconf -fvi && \
	./configure

RUN cd /root/BuildRoot/${PKGNAME} && make clean
RUN cd /root/BuildRoot/${PKGNAME} && make all
RUN cd /root/BuildRoot/${PKGNAME} && make check
RUN cd /root/BuildRoot/${PKGNAME} && make install
EOF
	fi
	docker build --no-cache -t "${IMAGENAME}" .
	result=$?
	if test $result -ne 0 ; then
		echo "**** Docker build failed with status $result ****" >&2
		return $result
	fi
	cd ../..
	return 0
}

function build_one()
{
	clean
	build "$1" "$2"
	result=$?
	clean
	exit $?
}

function list()
{
	local subdir
	
	for subdir in `cd BuildResources/Docker && echo *` ; do
		if test -r "BuildResources/Docker/$subdir/Dockerfile" ; then
			echo "  $subdir"
		fi
	done
}


function update_all()
{
	local subdir
	
	for subdir in `cd BuildResources/Docker && echo *` ; do
		if test -r "BuildResources/Docker/$subdir/Dockerfile" ; then
			update "$subdir"
		fi
	done
}

function prepare_all()
{
	for subdir in `cd BuildResources/Docker && echo *` ; do
		if test -r "BuildResources/Docker/$subdir/Dockerfile" ; then
			prepare "$subdir"
		fi
	done
}

function build_all()
{
	local target="$1"
	local result
	local subdir
	
	clean
	result=0
	for subdir in `cd BuildResources/Docker && echo *` ; do
		if test -r "BuildResources/Docker/$subdir/Dockerfile" ; then
			build "$subdir" "$target"
			result=$?
			if test $result -ne 0 ; then
				break
			fi
		fi
	done
	clean
	exit $result
}

function usage()
{
	echo "$PACKAGE Docker build tool"
	echo ""
	echo "Usage (from top of $PACKAGE source tree):"
	echo "  BuildScripts/docker-build all            Build for all targets"
	echo "  BuildScripts/docker-build clean          Remove build files"
	echo "  BuildScripts/docker-build prepare        Ensure base images exist"
	echo "  BuildScripts/docker-build update         Update base images"
	echo "  BuildScripts/docker-build list           List available targets"
	echo "  BuildScripts/docker-build TARGET         Build for TARGET"
	echo "  BuildScripts/docker-build update-TARGET  Update base image for TARGET"
	echo ""
	echo "Available targets:"
	list
	exit 0
}

if test x"$1" = x"" ; then
	usage
fi

case "$1" in
	all)
		clean
		build_all "$2"
		;;
	clean)
		clean
		;;
	up|update)
		update_all
		;;
	prep|prepare)
		prepare_all
		;;
	list)
		list
		;;
	update-*)
		target=`echo $1 | cut -c8-`
		if test -r "BuildResources/Docker/$target/Dockerfile" ; then
			update "$target"
		else
			usage
		fi
		;;
	*)
		if test -r "BuildResources/Docker/$1/Dockerfile" ; then
			build_one "$1" "$2"
		else
			usage
		fi
		;;
esac
