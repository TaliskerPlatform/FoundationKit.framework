#! /bin/sh

## Talisker: Foundation Toolkit

## Copyright 2012-2017 Mo McRoberts.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.

PACKAGE=FoundationKit
IMAGE=`echo $PACKAGE | tr A-Z a-z`

if ! test -r Resources/Docker/jessie/Dockerfile 2>&1 ; then
	echo "This script must be executed from the root of the $PACKAGE source tree" >&2
	echo "and invoked as:" >&2
	echo "" >&2
	echo "Resources/Docker/build" >&2
	exit 1
fi

function clean()
{
	echo "removing temporary build resources (DockerBuild)..." >&2
	rm -rf DockerBuild
}

function update()
{
	echo "building Docker image $IMAGE-base:$subdir..." >&2
	docker build -t $IMAGE-base:$subdir Resources/Docker/$subdir
	result=$?
	if test $result -ne 0 ; then
		echo "**** Docker build failed with status $result ****" >&2
		exit $result
	fi
}

function prepare()
{
	subdir="$1"
	printf "checking for Docker image $IMAGE-base:$subdir..." >&2
	match="`( docker images $IMAGE-base:$subdir | egrep \"^$IMAGE-base\" ) 2>&1`"
	if test x"$match" = x"" ; then
		echo " (not found)" >&2
		update "$subdir"
	else
		echo " found" >&2
	fi	
}

function build()
{
	subdir="$1"
	prepare "$subdir"
	printf "building $PACKAGE for $subdir...\n" >&2
	test -d DockerBuild || mkdir -p DockerBuild
	if ! test -r DockerBuild/$IMAGE-dockerroot.tar ; then
		tar cf DockerBuild/$IMAGE-dockerroot.tar .
	fi
	cd DockerBuild
	rm -rf $IMAGE-$subdir
	mkdir $IMAGE-$subdir
	cd $IMAGE-$subdir
	tar xf ../$IMAGE-dockerroot.tar
	cat >Dockerfile <<EOF
## Automatically generated by Resources/Docker/build

FROM $IMAGE-base:$subdir

RUN mkdir -p /root/BuildRoot/$PACKAGE
ADD ./ /root/BuildRoot/$PACKAGE

RUN cd /root/BuildRoot && \
	$PACKAGE/Resources/CI/before_install.sh

RUN cd /root/BuildRoot/$PACKAGE && \
	autoreconf -fvi && \
	./configure

RUN cd /root/BuildRoot/$PACKAGE && make clean
RUN cd /root/BuildRoot/$PACKAGE && make all
RUN cd /root/BuildRoot/$PACKAGE && make check
RUN cd /root/BuildRoot/$PACKAGE && make install
EOF
	docker build -t $IMAGE:$subdir .
	result=$?
	if test $result -ne 0 ; then
		echo "**** Docker build failed with status $result ****" >&2
		return $result
	fi
	cd ../..
	return 0
}

function build_one()
{
	clean
	build "$1"
	result=$?
	clean
	exit $?
}

function list()
{
	for subdir in `cd Resources/Docker && echo *` ; do
		if test -r "Resources/Docker/$subdir/Dockerfile" ; then
			echo "  $subdir"
		fi
	done
}


function update_all()
{
	for subdir in `cd Resources/Docker && echo *` ; do
		if test -r "Resources/Docker/$subdir/Dockerfile" ; then
			update "$subdir"
		fi
	done
}

function prepare_all()
{
	for subdir in `cd Resources/Docker && echo *` ; do
		if test -r "Resources/Docker/$subdir/Dockerfile" ; then
			prepare "$subdir"
		fi
	done
}

function build_all()
{
	clean
	result=0
	for subdir in `cd Resources/Docker && echo *` ; do
		if test -r "Resources/Docker/$subdir/Dockerfile" ; then
			build "$subdir"
			result=$?
			if test $result -ne 0 ; then
				break
			fi
		fi
	done
	clean
	exit $result
}

function usage()
{
	echo "$PACKAGE Docker build tool"
	echo ""
	echo "Usage (from top of $PACKAGE source tree):"
	echo "  Resources/Docker/build all       Build for all targets"
	echo "  Resources/Docker/build clean     Remove build files"
	echo "  Resources/Docker/build prepare   Ensure base images exist"
	echo "  Resources/Docker/build update    Update base images"
	echo "  Resources/Docker/build list      List available targets"
	echo "  Resources/Docker/build TARGET    Build for TARGET"
	echo ""
	echo "Available targets:"
	list
	exit 0
}

if test x"$1" = x"" ; then
	usage
fi

case "$1" in
	all)
		clean
		build_all
		;;
	clean)
		clean
		;;
	up|update)
		update_all
		;;
	prep|prepare)
		prepare_all
		;;
	list)
		list
		;;
	*)
		if test -r Resources/Docker/"$1"/Dockerfile ; then
			build_one "$1"
		else
			usage
		fi
		;;
esac
